<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Exchange Platform</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
  <style>
    body { font-family: Arial, sans-serif; }
    #chatroom { max-width: 600px; margin: 0 auto; padding: 20px; }
    #messages { border: 1px solid #ccc; padding: 10px; height: 300px; overflow-y: scroll; }
    #canvas { width: 100%; height: 400px; }
  </style>
</head>
<body>
  <div id="chatroom">
    <input type="text" id="username" placeholder="Enter your username">
    <button onclick="joinChat()">Join Chat</button>
    <input type="number" id="value" placeholder="Enter value">
    <button onclick="exchange()">Exchange</button>
    <div id="messages"></div>
    <canvas id="canvas"></canvas>
  </div>

  <script>
    const ws = new WebSocket('ws://localhost:8080');
    let canvas, gl;

    ws.onmessage = function(event) {
      const data = JSON.parse(event.data);
      const messagesDiv = document.getElementById('messages');
      
      switch(data.type) {
        case 'success':
        case 'info':
          messagesDiv.innerHTML += `<p>${data.message}</p>`;
          break;
        case 'error':
          messagesDiv.innerHTML += `<p style="color: red;">${data.message}</p>`;
          break;
        default:
          break;
      }
    };

    function joinChat() {
      const username = document.getElementById('username').value;
      ws.send(JSON.stringify({ type: 'join', username }));
    }

    function exchange() {
      const username = document.getElementById('username').value;
      const value = parseFloat(document.getElementById('value').value);
      ws.send(JSON.stringify({ type: 'exchange', username, value }));
    }

    function initWebGL() {
      canvas = document.getElementById('canvas');
      gl = canvas.getContext('webgl');
      
      if (!gl) {
        alert('WebGL not supported');
        return;
      }
      
      const vertexShaderSource = `
        attribute vec4 a_position;
        void main() {
          gl_Position = a_position;
        }
      `;
      
      const fragmentShaderSource = `
        void main() {
          gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0); // Red color
        }
      `;
      
      const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
      const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);
      const program = createProgram(gl, vertexShader, fragmentShader);
      
      const positionAttributeLocation = gl.getAttribLocation(program, 'a_position');
      
      const positionBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
      setGeometry(gl);
      
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
      gl.clearColor(0, 0, 0, 0);
      gl.clear(gl.COLOR_BUFFER_BIT);
      
      gl.useProgram(program);
      
      gl.enableVertexAttribArray(positionAttributeLocation);
      
      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
      const size = 2;
      const type = gl.FLOAT;
      const normalize = false;
      const stride = 0;
      const offset = 0;
      gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);
      
      const primitiveType = gl.TRIANGLES;
      const count = 6;
      gl.drawArrays(primitiveType, offset, count);
    }

    function createShader(gl, type, source) {
      const shader = gl.createShader(type);
      gl.shaderSource(shader, source);
      gl.compileShader(shader);
      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        console.error(gl.getShaderInfoLog(shader));
        gl.deleteShader(shader);
        return null;
      }
      return shader;
    }

    function createProgram(gl, vertexShader, fragmentShader) {
      const program = gl.createProgram();
      gl.attachShader(program, vertexShader);
      gl.attachShader(program, fragmentShader);
      gl.linkProgram(program);
      if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        console.error(gl.getProgramInfoLog(program));
        gl.deleteProgram(program);
        return n
