// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract NospaceToken {
    string public name = "Nospace";
    string public symbol = "NSP";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1000000 * 10 ** uint256(decimals);
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    address public owner;
    uint256 public numMiners;
    uint256 public constant MAX_MINERS = 10000;
    uint256 public rewardsPerMiner;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        owner = msg.sender;
        balanceOf[owner] = totalSupply;
        rewardsPerMiner = totalSupply / MAX_MINERS;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= balanceOf[_from]);
        require(_value <= allowance[_from][msg.sender]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function registerMiner() public returns (bool success) {
        require(numMiners < MAX_MINERS, "Maximum number of miners reached");
        numMiners += 1;
        balanceOf[msg.sender] += rewardsPerMiner;
        balanceOf[owner] -= rewardsPerMiner;
        emit Transfer(owner, msg.sender, rewardsPerMiner);
        return true;
    }
}
