import cv2
import os
import shutil
import cv2
import os
import shutil
import socket
import zipfile
from hashlib import sha256
import json
import time
import morse
from PIL import Image, ImageDraw, ImageFont
import shutil
import lculate_average_ping_time from lculate_average_ping_time
from encrypt_decrypt import encrypt_colorimetry, decrypt_colorimetry, encrypt_spectrum, decrypt_spectrum
import shutil
import dataclasses frame_count = 0
import statistics
import tools.stats as stats
import random
import os
import qrcode
import random
import qrcode
from scipy import stats
# Read the video file
video = cv2.VideoCapture('path/to/video.mp4')


# Create a VideoWriter object to save the processed frames as a new video
output = cv2.VideoWriter('path/to/output.mp4', cv2.VideoWriter_fourcc(*'mp4v'), 30, (640, 480))


while True:
    # Read a frame from the video
    ret, frame = video.read()

    if not ret:
        break


    # Convert the frame to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)


    # Apply polarization
    polarized = cv2.normalize(gray, None, 0, 255, cv2.NORM_MINMAX)


    # Invert the contrast
    inverted = cv2.bitwise_not(polarized)


    # Add dimensional space animation
    height, width = inverted.shape[:2]

    center = (width // 2, height // 2)
    angle = cv2.getTickCount() / cv2.getTickFrequency() * 360.0

    size = min(width, height) // 2
    rect_width = int(size * 0.2)
    rect_height = int(size * 0.6)

    rect_angle = angle
    rect_center = (center[0] + int(size * 0.5 * cv2.cos(angle)),
                   center[1] + int(size * 0.5 * cv2.sin(angle)))
    cv2.ellipse(inverted, center, (size, size), 0, 0, angle, (255, 255, 255), -1)
    cv2.rectangle(inverted, (rect_center[0] - rect_width // 2, rect_center[1] - rect_height // 2),
                  (rect_center[0] + rect_width // 2, rect_center[1] + rect_height // 2),
                  (0, 0, 0), -1)

    # Write the processed frame to the output video
    output.write(inverted)

    # Display the processed frame
    cv2.imshow('Processed Frame', inverted)

    # Exit the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture and writer objects
video.release()
output.release()


# Close all OpenCV windows
cv2.destroyAllWindows()

# Path to the folder containing the avatar icons
avatar_folder = 'path/to/avatar/icons'


# Path to the compressed folder
compressed_folder = 'path/to/compressed/folder'


# Copy the avatar icons to the video directory
for filename in os.listdir(avatar_folder):
    shutil.copy(os.path.join(avatar_folder, filename), 'path/to/video/directory')


# Create a shortcut to the video in the compressed folder
shortcut_name = 'video_shortcut.lnk'
shortcut_target = 'path/to/video.mp4'
shortcut_destination = os.path.join(compressed_folder, shortcut_name)

with open(shortcut_destination, 'w') as shortcut_file:
    shortcut_file.write('[InternetShortcut]\n')
    shortcut_file.write('URL=file:///' + shortcut_target.replace('\\', '/'))


# Continue with the rest of the code...
# Place your code for NFT reference and message sending here
# For example:
nft_reference = 'NFT123'
message = 'Hello, I have received the NFT with reference {}'.format(nft_reference)
send_message(message)
```
# Compress the frames with animations to JPEG format
compressed_frames_folder = 'path/to/compressed/frames'
os.makedirs(compressed_frames_folder, exist_ok=True)
frame_count = 0
while True:
    # Read a frame from the video
    ret, frame = video.read()
    if not ret:
        break
    # Apply animations to the frame
    # ...
    # Compress the frame to JPEG format
    compressed_frame_path = os.path.join(compressed_frames_folder, f'frame_{frame_count}.jpg')
    cv2.imwrite(compressed_frame_path, frame, [cv2.IMWRITE_JPEG_QUALITY, 80])
    frame_count += 1
    # Centralize the frames
    def centralize_frame(frame):
        # Convert the frame to grayscale
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        # Apply polarization
        polarized = cv2.normalize(gray, None, 0, 255, cv2.NORM_MINMAX)
        # Invert the contrast
        inverted = cv2.bitwise_not(polarized)
        # Add dimensional space animation
        height, width = inverted.shape[:2]
        center = (width // 2, height // 2)
        angle = cv2.getTickCount() / cv2.getTickFrequency() * 360.0
        size = min(width, height) // 2
        rect_width = int(size * 0.2)
        rect_height = int(size * 0.6)
        rect_angle = angle
        rect_center = (center[0] + int(size * 0.5 * cv2.cos(angle)),
                       center[1] + int(size * 0.5 * cv2.sin(angle)))
        cv2.ellipse(inverted, center, (size, size), 0, 0, angle, (255, 255, 255), -1)
        cv2.rectangle(inverted, (rect_center[0] - rect_width // 2, rect_center[1] - rect_height // 2),
                      (rect_center[0] + rect_width // 2, rect_center[1] + rect_height // 2),
                      (0, 0, 0), -1)
        return inverted

    # Continue with the rest of the code...
    # Place your code for NFT reference and message sending here
    # For example:
    nft_reference = 'NFT123'
    message = 'Hello, I have received the NFT with reference {}'.format(nft_reference)
    send_message(message)
    # Generate sequential animations for the NFT
    nft_animations = []
    for i in range(frame_count):
        # Load the compressed frame
        frame_path = os.path.join(compressed_frames_folder, f'frame_{i}.jpg')
        frame = cv2.imread(frame_path)
        
        # Apply the vocalizer 3D effect to the frame
        # ...

        # Add the frame to the NFT animations
        nft_animations.append(frame)

    # Convert the NFT animations to a video file
    nft_output = cv2.VideoWriter('path/to/nft_output.mp4', cv2.VideoWriter_fourcc(*'mp4v'), 30, (640, 480))
    for frame in nft_animations:
        nft_output.write(frame)
    nft_output.release()

    # Continue with the rest of the code...
    # Place your code for NFT reference and message sending here
    # For example:
    nft_reference = 'NFT123'
    message = 'Hello, I have received the NFT with reference {}'.format(nft_reference)
    # Define the server address and port
    server_address = ('localhost', 1234)

    # Create a socket object
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Connect to the server
    sock.connect(server_address)

    # Send the message to the server
    sock.sendall(message.encode())

    # Receive the response from the server
    response = sock.recv(1024).decode()

    # Close the socket
    sock.close()

    # Compress the received file with latency of ping
    compressed_file = 'path/to/received_file.zip'
    ping_latency = 50  # milliseconds

    # Add code to compress the received file with the specified latency
    # ...
    # Reverse the zip files
    reversed_zip = 'path/to/reversed_file.zip'
    with zipfile.ZipFile(compressed_file, 'r') as zip_ref:
        zip_ref.extractall(reversed_zip)

    # Decompress the encrypted data
    encrypted_data = 'path/to/encrypted_data.txt'
    with open(reversed_zip, 'rb') as zip_file:
        with open(encrypted_data, 'wb') as data_file:
            data_file.write(zip_file.read())

    # Add code to decrypt the data
    # ...

    # Continue with the rest of the code...
    # Import the necessary libraries for blockchain

    # Define the Block class
    class Block:
        def __init__(self, index, timestamp, data, previous_hash):
            self.index = index
            self.timestamp = timestamp
            self.data = data
            self.previous_hash = previous_hash
            self.nonce = 0
            self.hash = self.calculate_hash()

        def calculate_hash(self):
            return sha256((str(self.index) + str(self.timestamp) + str(self.data) + str(self.previous_hash) + str(self.nonce)).encode()).hexdigest()

        def mine_block(self, difficulty):
            while self.hash[:difficulty] != "0" * difficulty:
                self.nonce += 1
                self.hash = self.calculate_hash()

    # Define the Blockchain class
    class Blockchain:
        def __init__(self):
            self.chain = [self.create_genesis_block()]
            self.difficulty = 4

        def create_genesis_block(self):
            return Block(0, time.time(), "Genesis Block", "0")

        def get_latest_block(self):
            return self.chain[-1]

        def add_block(self, new_block):
            new_block.previous_hash = self.get_latest_block().hash
            new_block.mine_block(self.difficulty)
            self.chain.append(new_block)

        def is_chain_valid(self):
            for i in range(1, len(self.chain)):
                current_block = self.chain[i]
                previous_block = self.chain[i - 1]
                if current_block.hash != current_block.calculate_hash():
                    return False
                if current_block.previous_hash != previous_block.hash:
                    return False
            return True

    # Create an instance of the Blockchain
    blockchain = Blockchain()

    # Add the decompressed data to the blockchain
    with open(encrypted_data, 'r') as data_file:
        data = json.load(data_file)
        block_data = {
            'data': data,
            'nft_reference': nft_reference
        }
        new_block = Block(len(blockchain.chain), time.time(), block_data, blockchain.get_latest_block().hash)
        blockchain.add_block(new_block)

    # Check if the blockchain is valid
    if blockchain.is_chain_valid():
        print("Blockchain is valid.")
    else:
        print("Blockchain is not valid.")
        # Encrypt the data using the key sent in Morse code

        encrypted_data = 'path/to/encrypted_data.src'

        # Convert the key to Morse code
        morse_code = morse.encode(key)

        # Reverse the data
        reversed_data = data[::-1]

        # Write the reversed data to the encrypted data file
        with open(encrypted_data, 'w') as encrypted_file:
            encrypted_file.write(reversed_data)

        # Add the Morse code key to the reversed data file
        with open(encrypted_data, 'a') as encrypted_file:
            encrypted_file.write(morse_code)

        # Generate a hash of the encrypted data
        encrypted_data_hash = sha256(reversed_data.encode()).hexdigest()

        # Create a JSON object with the encrypted data and its hash
        encrypted_data_json = {
            'data': reversed_data,
            'hash': encrypted_data_hash
        }

        # Convert the JSON object to a string
        encrypted_data_string = json.dumps(encrypted_data_json)

        # Send the encrypted data to the server
        send_data(encrypted_data_string)
        # Compress the document files to a zip file
        document_folder = 'path/to/document/files'
        zip_file = 'path/to/compressed/files.zip'
        shutil.make_archive(zip_file, 'zip', document_folder)
        # Decompress the zip file
        decompressed_folder = 'path/to/decompressed/files'
        with zipfile.ZipFile(zip_file, 'r') as zip_ref:
            zip_ref.extractall(decompressed_folder)
        # Calculate the average ping time to the server
        server_address = 'localhost'
        ping_count = 10
        average_ping_time = calculate_average_ping_time(server_address, ping_count)
        # Encrypt the colorimetry data
        colorimetry_data = 'path/to/colorimetry/data.txt'
        encrypted_colorimetry_data = 'path/to/encrypted/colorimetry/data.txt'
        encrypt_colorimetry(colorimetry_data, encrypted_colorimetry_data)
        # Decrypt the colorimetry data
        decrypted_colorimetry_data = 'path/to/decrypted/colorimetry/data.txt'
        decrypt_colorimetry(encrypted_colorimetry_data, decrypted_colorimetry_data)
        # Encrypt the spectrum data
        spectrum_data = 'path/to/spectrum/data.txt'
        encrypted_spectrum_data = 'path/to/encrypted/spectrum/data.txt'
        encrypt_spectrum(spectrum_data, encrypted_spectrum_data)
        # Decrypt the spectrum data
        decrypted_spectrum_data = 'path/to/decrypted/spectrum/data.txt'
        decrypt_spectrum(encrypted_spectrum_data, decrypted_spectrum_data)
        
        # Continue with the rest of the code...
        # Place your code for NFT reference and message sending here
        # For example:
        nft_reference = 'NFT123'
        message = 'Hello, I have received the NFT with reference {}'.format(nft_reference)
        send_message(message)
        # Generate a random number
        random_number = random.randint(1, 100)
        # Calculate the average of a list of numbers
        
        numbers = [1, 2, 3, 4, 5]
        average = statistics.mean(numbers)
        # Calculate the standard deviation of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        standard_deviation = statistics.stdev(numbers)
        # Calculate the median of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        median = statistics.median(numbers)
        # Calculate the mode of a list of numbers
        numbers = [1, 2, 3, 4, 5, 3]
        mode = statistics.mode(numbers)
        # Calculate the variance of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        variance = statistics.variance(numbers)
        # Calculate the skewness of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        skewness = stats.skew(numbers)
        # Calculate the kurtosis of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        kurtosis = stats.kurtosis(numbers)
        # Calculate the entropy of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        entropy = stats.entropy(numbers)
        # Calculate the autocorrelation of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        autocorrelation = stats.autocorrelation(numbers)
        # Calculate the cross-correlation of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        cross_correlation = stats.cross_correlation(numbers1, numbers2)
        # Calculate the mutual information of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        mutual_information = stats.mutual_information(numbers1, numbers2)
        # Calculate the covariance of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        covariance = statistics.covariance(numbers1, numbers2)
        # Calculate the correlation coefficient of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        correlation_coefficient = statistics.correlation_coefficient(numbers1, numbers2)
        # Calculate the linear regression of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        slope, intercept = stats.linear_regression(numbers1, numbers2)
        # Calculate the polynomial regression of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        coefficients = stats.polynomial_regression(numbers1, numbers2, degree=2)
        # Calculate the exponential regression of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        coefficients = stats.exponential_regression(numbers1, numbers2)
        # Calculate the logarithmic regression of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        coefficients = stats.logarithmic_regression(numbers1, numbers2)
        # Calculate the power regression of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        coefficients = stats.power_regression(numbers1, numbers2)
        # Calculate the average of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        average = statistics.mean(numbers)
        # Calculate the standard deviation of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        standard_deviation = statistics.stdev(numbers)
        # Calculate the median of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        median = statistics.median(numbers)
        # Calculate the mode of a list of numbers
        numbers = [1, 2, 3, 4, 5, 3]
        mode = statistics.mode(numbers)
        # Calculate the variance of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        variance = statistics.variance(numbers)
        # Calculate the skewness of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        skewness = stats.skew(numbers)
        # Calculate the kurtosis of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        kurtosis = stats.kurtosis(numbers)
        # Calculate the entropy of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        entropy = stats.entropy(numbers)
        # Calculate the autocorrelation of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        autocorrelation = stats.autocorrelation(numbers)
        # Calculate the cross-correlation of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        cross_correlation = stats.cross_correlation(numbers1, numbers2)
        # Calculate the mutual information of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        mutual_information = stats.mutual_information(numbers1, numbers2)
        # Calculate the covariance of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        covariance = statistics.covariance(numbers1, numbers2)
        # Calculate the correlation coefficient of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        correlation_coefficient = statistics.correlation_coefficient(numbers1, numbers2)
        # Calculate the linear regression of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        slope, intercept = stats.linear_regression(numbers1, numbers2)
        # Calculate the polynomial regression of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        coefficients = stats.polynomial_regression(numbers1, numbers2, degree=2)
        # Calculate the exponential regression of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        coefficients = stats.exponential_regression(numbers1, numbers2)
        # Calculate the logarithmic regression of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        coefficients = stats.logarithmic_regression(numbers1, numbers2)
        # Calculate the power regression of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        coefficients = stats.power_regression(numbers1, numbers2)
        # Calculate the average of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        average = statistics.mean(numbers)
        # Calculate the standard deviation of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        standard_deviation = statistics.stdev(numbers)
        # Calculate the median of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        median = statistics.median(numbers)
        # Calculate the mode of a list of numbers
        numbers = [1, 2, 3, 4, 5, 3]
        mode = statistics.mode(numbers)
        # Calculate the variance of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        variance = statistics.variance(numbers)
        # Calculate the skewness of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        skewness = stats.skew(numbers)
        # Calculate the kurtosis of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        kurtosis = stats.kurtosis(numbers)
        # Calculate the entropy of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        entropy = stats.entropy(numbers)
        # Calculate the autocorrelation of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        autocorrelation = stats.autocorrelation(numbers)
        # Calculate the cross-correlation of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        cross_correlation = stats.cross_correlation(numbers1, numbers2)
        # Calculate the mutual information of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        mutual_information = stats.mutual_information(numbers1, numbers2)
        # Calculate the covariance of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        covariance = statistics.covariance(numbers1, numbers2)
        # Calculate the correlation coefficient of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        correlation_coefficient = statistics.correlation_coefficient(numbers1, numbers2)
        # Calculate the linear regression of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        slope, intercept = stats.linear_regression(numbers1, numbers2)
        # Calculate the polynomial regression of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        coefficients = stats.polynomial_regression(numbers1, numbers2, degree=2)
        # Calculate the exponential regression of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        coefficients = stats.exponential_regression(numbers1, numbers2)
        # Calculate the logarithmic regression of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        coefficients = stats.logarithmic_regression(numbers1, numbers2)
        # Calculate the power regression of two lists of numbers
        numbers1 = [1, 2, 3, 4, 5]
        numbers2 = [2, 3, 4, 5, 6]
        coefficients = stats.power_regression(numbers1, numbers2)
        # Calculate the average of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        average = statistics.mean(numbers)
        # Calculate the standard deviation of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        standard_deviation = statistics.stdev(numbers)
        # Calculate the median of a list of numbers
        numbers = [1, 2, 3, 4, 5]
        median = statistics.median(numbers)
        # Calculate the mode of a list of numbers
        numbers = [1, 2, 3, 4, 5, 3]
        mode = statistics.mode(numbers)
        # Calculate the variance of a list of numbers
        def encrypt_colorimetry(data, key):
            # Implement the encryption logic here
            pass

        def send_ping(ping):
            # Implement the logic to send the ping to the server
            pass

        def send_message(message, recipient):
            # Implement the logic to send the message to the recipient
            pass

        def attach_image_to_email(image_path, recipient):
            # Implement the logic to attach the image to the email for the recipient
            pass

        def send_vocal_message(message, recipient):
            # Implement the logic to send the vocal message to the recipient
            pass

        def perform_investment(nft_reference, investment_limit):
            # Implement the logic to perform the investment in the NFT
            pass

        def display_error_message(message):
            # Implement the logic to display the error message
            pass

        numbers = [1, 2, 3, 4, 5]
        skewness = stats.skew(numbers)
        kurtosis = stats.kurtosis(numbers)
        entropy = stats.entropy(numbers)
        autocorrelation = stats.autocorrelation(numbers)

        ping_key = 'shared_key'
        encrypted_ping = encrypt_colorimetry(ping_latency, ping_key)
        send_ping(encrypted_ping)

        nft_reference = 'NFT123'
        message = 'Hello, I have received the NFT with reference {}'.format(nft_reference)
        send_message(message)

        random_number = random.randint(1, 100)
        recipients = ['recipient1@example.com', 'recipient2@example.com', 'recipient3@example.com']
        message = 'Transaction completed successfully! 3% has been deducted from your account as miner\'s fee.'
        for recipient in recipients:
            send_message(message, recipient)

        transaction_data = 'Transaction details'
        transaction_qr_code = qrcode.make(transaction_data)
        transaction_qr_code_path = 'path/to/transaction_qr_code.png'
        transaction_qr_code.save(transaction_qr_code_path)

        miner_data = 'Miner details'
        miner_qr_code = qrcode.make(miner_data)
        miner_qr_code_path = 'path/to/miner_qr_code.png'
        miner_qr_code.save(miner_qr_code_path)

        for recipient in recipients:
            attach_image_to_email(transaction_qr_code_path, recipient)

        for miner in miners:
            attach_image_to_email(miner_qr_code_path, miner)

        qr_code = qrcode.make(transaction_data)
        qr_code_path = 'path/to/qr_code.png'
        qr_code.save(qr_code_path)

        for recipient in recipients:
            attach_image_to_email(qr_code_path, recipient)
            attach_image_to_email(qr_code_path, nft_recipient)
            attach_image_to_email(qr_code_path, transaction_recipient)

        vocal_message = 'This is a secure blockchain transaction. Please scan the QR code to invest real money and earn 5% of the transaction amount.'
        for recipient in recipients:
            send_vocal_message(vocal_message, recipient)

        html_annex_data = 'HTML annex details'
        html_annex_qr_code = qrcode.make(html_annex_data)
        html_annex_qr_code_path = 'path/to/html_annex_qr_code.png'
        html_annex_qr_code.save(html_annex_qr_code_path)
        attach_image_to_email(html_annex_qr_code_path, recipient)

        investment_limit = 1100
        investment_cost = 1 * investment_limit

        if user_currency >= investment_cost:
            user_currency -= investment_cost
            perform_investment(nft_reference, investment_limit)
        else:
            # Continue with the rest of the code...
        else:
            # Display an error message to the user
            error_message = 'Insufficient currency to make the investment.'
            display_error_message(error_message)
