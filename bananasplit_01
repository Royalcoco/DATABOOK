import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;

import javax.imageio.ImageIO;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;

public class DecentralizedLibrary {
    private Map<String, Consumer<String>> codeLibrary;

    public DecentralizedLibrary() {
        codeLibrary = new HashMap<>();
    }

    public void addCode(String key, Consumer<String> codeFunction) {
        codeLibrary.put(key, codeFunction);
    }

    public void executeCode(String key, String parameter) {
        if (codeLibrary.containsKey(key)) {
            codeLibrary.get(key).accept(parameter);
        } else {
            System.out.println("Code not found for key: " + key);
        }
    }

    public static void main(String[] args) {
        DecentralizedLibrary library = new DecentralizedLibrary();

        library.addCode("A", (String outputPath) -> {
            try {
                // Generate Banana Image
                int width = 600, height = 600;
                BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
                Graphics2D g = image.createGraphics();

                // Set background color
                g.setColor(Color.WHITE);
                g.fillRect(0, 0, width, height);

                // Draw banana shape
                g.setColor(Color.YELLOW);
                g.fillOval(200, 200, 200, 100);

                // Add text
                g.setColor(Color.BLACK);
                g.drawString("Banana NFT", 270, 270);

                g.dispose();

                // Save image
                ImageIO.write(image, "png", new File(outputPath));
                System.out.println("Banana NFT saved to " + outputPath);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });

        library.addCode("B", (String data) -> {
            try {
                // Create QR Code
                String filePath = "qr_code.png";
                int width = 300, height = 300;
                BitMatrix bitMatrix = new MultiFormatWriter().encode(data, BarcodeFormat.QR_CODE, width, height);
                MatrixToImageWriter.writeToPath(bitMatrix, "PNG", new File(filePath).toPath());
                System.out.println("QR code saved to " + filePath);
            } catch (WriterException | IOException e) {
                e.printStackTrace();
            }
        });

        // Test the code
        library.executeCode("A", "banana_nft.png"); // Doit créer et sauvegarder l'image de la banane
        library.executeCode("B", "https://your.ipfs.gateway/galaxy_rotation.mp4"); // Doit créer et sauvegarder le QR code
    }
}
